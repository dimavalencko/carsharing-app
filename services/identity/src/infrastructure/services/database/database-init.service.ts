// database-init.service.ts
import { Injectable, OnApplicationBootstrap, Logger } from '@nestjs/common';
import { InjectDataSource } from '@nestjs/typeorm';
import { DataSource } from 'typeorm';
import { SeederService } from './seeder.service';
import { ConfigService } from '@nestjs/config';

@Injectable()
export class DatabaseInitService implements OnApplicationBootstrap {
  private readonly logger = new Logger(DatabaseInitService.name);

  constructor(
    @InjectDataSource()
    private dataSource: DataSource,
    private seederService: SeederService,
    private configService: ConfigService
  ) {
    this.logger.log('DatabaseInitService constructor called');
  }

  async onApplicationBootstrap() {
    this.logger.log('onApplicationBootstrap called');
    
    try {
      console.log('üîç Checking DataSource initialization...');
      console.log('üîç DataSource isInitialized:', this.dataSource.isInitialized);
      
      // –ï—Å–ª–∏ DataSource –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
      if (!this.dataSource.isInitialized) {
        console.log('üîç Initializing DataSource...');
        await this.dataSource.initialize();
        console.log('üîç DataSource initialized:', this.dataSource.isInitialized);
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º metadata –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
      const entities = this.dataSource.entityMetadatas;
      console.log('üîç Available entities after initialization:', entities.map(e => e.name));
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
      await this.dataSource.query('SELECT 1');
      this.logger.log('‚úÖ Database connection established');
      
      // –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π
      await this.runMigrations();
      
      // –ó–∞—Å–µ–∏–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
      await this.seedData();
      this.logger.log('‚úÖ Data seeding completed');
      
      this.logger.log('‚úÖ Database initialization completed');
    } catch (error) {
      this.logger.error('‚ùå Database initialization failed:', error);
      throw error;
    }
  }

  private async runMigrations() {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –º–∏–≥—Ä–∞—Ü–∏–π
      const migrationTableExists = await this.dataSource.query(`
        SELECT EXISTS (
          SELECT FROM information_schema.tables 
          WHERE table_schema = 'public' 
          AND table_name = 'migrations'
        )
      `);
      
      if (!migrationTableExists[0].exists) {
        this.logger.log('Running synchronize instead of migrations');
        await this.dataSource.synchronize();
        this.logger.log('‚úÖ Synchronize completed');
      }
    } catch (error) {
      this.logger.warn('Migrations failed, trying to synchronize...');
      await this.dataSource.synchronize();
      this.logger.log('‚úÖ Synchronize completed as fallback');
    }
  }

  private async seedData() {
    try {
      await this.seederService.seedAll();
      this.logger.log('‚úÖ Data seeding completed');
    } catch (error) {
      this.logger.error('‚ùå Data seeding failed:', error);
    }
  }
}